@page "/"
@using System.Timers;
@using KillTheFly.Shared;
@inject HttpClient Http
@inject ILocalStorageService _localstorage;

<PageTitle>KTF</PageTitle>


@if(MapSnapshot is null)
{
    <h2>No game in course</h2>
}
else
{
    <h2>Game time: @MapSnapshot.GameTime | Seconds: @(MapSnapshot.MilisecondsPast / 1000) | X: @(MapSnapshot.Map.ElementAt(4).X) | Y: @(MapSnapshot.Map.ElementAt(4).Y) | Foes: @MapSnapshot.Foes</h2>
    <div class="grid-container">
        @for(int i = 0; i < MapSnapshot.Map.Count(); i++)
        {
            var temp = i;
            <div class="grid-item" id="display" @onclick="() => Move(temp)">
                @switch(MapSnapshot.Map.ElementAt(i).Avatar)
                {
                    case 'Z':
                        <div class="spinner">
                            <svg class="spinner-icon" viewBox="-10 -10 70 70" width="100" height="100">
                                <image xlink:href="fly-icon.svg" width="40" height="40" />
                            </svg>
                        </div>
                        break;
                    case 'E':
                        <p/>
                        break;
                    default:
                        <svg viewBox="-10 -10 70 70" width="100" height="100">
                            <image xlink:href="flycatcher-icon.svg" width="40" height="40" />
                        </svg>
                        break;
                }
            </div>
        }
    </div>
}
<h2>Max score: 10 | score: 2</h2>
<h2>UserToken: @PlayerGuid</h2>


@code {
    const string PLAYER_GUID_STORAGE_KEY = "PlayerGuid";
    [Parameter]
    public string? PlayerGuid { get; set; }
    [Parameter]
    public MapSnapshot? MapSnapshot { get; set; }
    private System.Timers.Timer timer;

    protected override async Task OnInitializedAsync()
    {
        if (await _localstorage.ContainKeyAsync(PLAYER_GUID_STORAGE_KEY))
        {
            PlayerGuid = await _localstorage.GetItemAsStringAsync(PLAYER_GUID_STORAGE_KEY);
        }
        else
        {
            PlayerGuid = Guid.NewGuid().ToString();
            await _localstorage.SetItemAsStringAsync(PLAYER_GUID_STORAGE_KEY, PlayerGuid);
        }

        await Http.PostAsJsonAsync<object>($"Game/Register/{PlayerGuid}", new { });
        timer = new System.Timers.Timer(500);
        timer.Elapsed += UpdateMap;
        timer.Start();
    }

    public async void Move(int movement)
    {
        await Http.PostAsJsonAsync<object>($"Game/Move/{PlayerGuid}/{movement}", new { });
        
    }

    public async void UpdateMap(object? sender, ElapsedEventArgs e)
    {
        MapSnapshot = await Http.GetFromJsonAsync<MapSnapshot>($"Game/Map/{PlayerGuid}");
        StateHasChanged();
    }
}
